// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSeviceClient is the client API for UserSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSeviceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	AddUserVerbose(ctx context.Context, in *User, opts ...grpc.CallOption) (UserSevice_AddUserVerboseClient, error)
	AddUsers(ctx context.Context, opts ...grpc.CallOption) (UserSevice_AddUsersClient, error)
	AddUserStreamBoth(ctx context.Context, opts ...grpc.CallOption) (UserSevice_AddUserStreamBothClient, error)
}

type userSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSeviceClient(cc grpc.ClientConnInterface) UserSeviceClient {
	return &userSeviceClient{cc}
}

func (c *userSeviceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.UserSevice/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSeviceClient) AddUserVerbose(ctx context.Context, in *User, opts ...grpc.CallOption) (UserSevice_AddUserVerboseClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserSevice_ServiceDesc.Streams[0], "/pb.UserSevice/AddUserVerbose", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSeviceAddUserVerboseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserSevice_AddUserVerboseClient interface {
	Recv() (*UserResultStream, error)
	grpc.ClientStream
}

type userSeviceAddUserVerboseClient struct {
	grpc.ClientStream
}

func (x *userSeviceAddUserVerboseClient) Recv() (*UserResultStream, error) {
	m := new(UserResultStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userSeviceClient) AddUsers(ctx context.Context, opts ...grpc.CallOption) (UserSevice_AddUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserSevice_ServiceDesc.Streams[1], "/pb.UserSevice/AddUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSeviceAddUsersClient{stream}
	return x, nil
}

type UserSevice_AddUsersClient interface {
	Send(*User) error
	CloseAndRecv() (*Users, error)
	grpc.ClientStream
}

type userSeviceAddUsersClient struct {
	grpc.ClientStream
}

func (x *userSeviceAddUsersClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSeviceAddUsersClient) CloseAndRecv() (*Users, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Users)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userSeviceClient) AddUserStreamBoth(ctx context.Context, opts ...grpc.CallOption) (UserSevice_AddUserStreamBothClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserSevice_ServiceDesc.Streams[2], "/pb.UserSevice/AddUserStreamBoth", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSeviceAddUserStreamBothClient{stream}
	return x, nil
}

type UserSevice_AddUserStreamBothClient interface {
	Send(*User) error
	Recv() (*UserResultStream, error)
	grpc.ClientStream
}

type userSeviceAddUserStreamBothClient struct {
	grpc.ClientStream
}

func (x *userSeviceAddUserStreamBothClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSeviceAddUserStreamBothClient) Recv() (*UserResultStream, error) {
	m := new(UserResultStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserSeviceServer is the server API for UserSevice service.
// All implementations must embed UnimplementedUserSeviceServer
// for forward compatibility
type UserSeviceServer interface {
	AddUser(context.Context, *User) (*User, error)
	AddUserVerbose(*User, UserSevice_AddUserVerboseServer) error
	AddUsers(UserSevice_AddUsersServer) error
	AddUserStreamBoth(UserSevice_AddUserStreamBothServer) error
	mustEmbedUnimplementedUserSeviceServer()
}

// UnimplementedUserSeviceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSeviceServer struct {
}

func (UnimplementedUserSeviceServer) AddUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserSeviceServer) AddUserVerbose(*User, UserSevice_AddUserVerboseServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUserVerbose not implemented")
}
func (UnimplementedUserSeviceServer) AddUsers(UserSevice_AddUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (UnimplementedUserSeviceServer) AddUserStreamBoth(UserSevice_AddUserStreamBothServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUserStreamBoth not implemented")
}
func (UnimplementedUserSeviceServer) mustEmbedUnimplementedUserSeviceServer() {}

// UnsafeUserSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSeviceServer will
// result in compilation errors.
type UnsafeUserSeviceServer interface {
	mustEmbedUnimplementedUserSeviceServer()
}

func RegisterUserSeviceServer(s grpc.ServiceRegistrar, srv UserSeviceServer) {
	s.RegisterService(&UserSevice_ServiceDesc, srv)
}

func _UserSevice_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSeviceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserSevice/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSeviceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSevice_AddUserVerbose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserSeviceServer).AddUserVerbose(m, &userSeviceAddUserVerboseServer{stream})
}

type UserSevice_AddUserVerboseServer interface {
	Send(*UserResultStream) error
	grpc.ServerStream
}

type userSeviceAddUserVerboseServer struct {
	grpc.ServerStream
}

func (x *userSeviceAddUserVerboseServer) Send(m *UserResultStream) error {
	return x.ServerStream.SendMsg(m)
}

func _UserSevice_AddUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserSeviceServer).AddUsers(&userSeviceAddUsersServer{stream})
}

type UserSevice_AddUsersServer interface {
	SendAndClose(*Users) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userSeviceAddUsersServer struct {
	grpc.ServerStream
}

func (x *userSeviceAddUsersServer) SendAndClose(m *Users) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSeviceAddUsersServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserSevice_AddUserStreamBoth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserSeviceServer).AddUserStreamBoth(&userSeviceAddUserStreamBothServer{stream})
}

type UserSevice_AddUserStreamBothServer interface {
	Send(*UserResultStream) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userSeviceAddUserStreamBothServer struct {
	grpc.ServerStream
}

func (x *userSeviceAddUserStreamBothServer) Send(m *UserResultStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSeviceAddUserStreamBothServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserSevice_ServiceDesc is the grpc.ServiceDesc for UserSevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserSevice",
	HandlerType: (*UserSeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserSevice_AddUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddUserVerbose",
			Handler:       _UserSevice_AddUserVerbose_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddUsers",
			Handler:       _UserSevice_AddUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddUserStreamBoth",
			Handler:       _UserSevice_AddUserStreamBoth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
